@{
    /**/

    Layout = "~/_Layout.cshtml";
    Page.Title = "CRUD Page";


    var productname = "";
    var supplierid = "";
    var categoryid = "";
    var quantityperunit = "";
    var unitprice = "";
    var unitsinstock = "";
    var unitsonorder = "";
    var reorderlevel = "";
    var thebutton = Request.Form["FormButton"];

    //obtain two lists: SupplierList and CategoryList
    var db = Database.Open("NWDB");
    var supplierquery = @"SELECT SupplierID, CompanyName
  FROM Suppliers
  Order by CompanyName";
    var categoryquery = @"SELECT CategoryID, CategoryName
  FROM Categories
  Order by CategoryName";
    var supplierlist = db.Query(supplierquery);
    var categorylist = db.Query(categoryquery);

    //these validator controls execute on the client and server sides
    Validation.Add("ProductName",
         Validator.Required("Product Name is required"),
         Validator.StringLength(10, 1, "Product Name is limited to 160 characters"));
    Validation.Add("QuantityPerUnit",
         Validator.StringLength(20, 0, "Quantity Per Unit is limited to 20 characters"));
    Validation.Add("UnitPrice",
         Validator.Range(0.0, double.MaxValue, "Price must be dollar amount 0.00 or greater."));
    Validation.Add("UnitsInStock",
         Validator.Range(0, Int16.MaxValue, "Units in stock must be 0 or greater"));
    Validation.Add("UnitsOnOrder",
         Validator.Range(0, Int16.MaxValue, "Units on Order must be 0 or greater"));
    Validation.Add("ReorderLevel",
         Validator.Range(0, Int16.MaxValue, "Reorder Level must be 0 or greater"));
}

@section banner{
    <h1>Database: CRUD Product</h1>
}

@if (IsPost)
{
    //when you have multiple buttons, a good practice is to determine
    //    what action to do for the press button FIRST!
    if (thebutton.Equals("Clear"))
    {
        <p class="text-center well">You cleaned the current input.</p>
    }
    else
    {
        productname = Request.Form["ProductName"];
        supplierid = Request.Form["SupplierList"];
        categoryid = Request.Form["CategoryList"];
        quantityperunit = Request.Form["QuantityPerUnit"];
        unitprice = Request.Form["UnitPrice"];
        unitsinstock = Request.Form["UnitsInStock"];
        unitsonorder = Request.Form["UnitsOnOrder"];
        reorderlevel = Request.Form["ReorderLevel"];

        //data is validated
        if (Validation.IsValid())
        {
            //you may be required to do some validation using logic
            //we will assume that supplier and category must be choosen
            var validflag = true;
            if (supplierid.Equals("0"))
            {
                validflag = false;
                <p class="text-center"><span style="color:dodgerblue">Select a supplier for the product.</span></p>
            }
            if (categoryid.Equals("0"))
            {
                validflag = false;
                <p class="text-center"><span style="color:dodgerblue">Select a category for the product.</span></p>
            }
            if (validflag)
            {
                //you should (and are expected) to perform CRUD operations
                //   within user friendly error handling
                try
                {
                    var insertcommand = @"INSERT INTO Products (ProductName,
                        SupplierID, CategoryID, QuantityPerUnit,
                        UnitPrice, UnitsInStock, UnitsOnOrder,
                        ReorderLevel, Discontinued)
                        VALUES (@0, @1, @2, @3, @4, @5, @6, @7, @8)";
                    db.Execute(insertcommand, productname,
                    string.IsNullOrEmpty(supplierid) ? null : supplierid,
                                            string.IsNullOrEmpty(categoryid) ? null : categoryid,
                                            string.IsNullOrEmpty(quantityperunit) ? null : quantityperunit,
                                            string.IsNullOrEmpty(unitprice) ? null : unitprice,
                                            string.IsNullOrEmpty(unitsinstock) ? null : unitsinstock,
                                            string.IsNullOrEmpty(unitsonorder) ? null : unitsonorder,
                                            string.IsNullOrEmpty(reorderlevel) ? null : reorderlevel,
                                            0);
                    //there are only 2 possibilities for an insert
                    //  a) works
                    //  b) aborts (handle by try/catch)
                    <p class="text-center well"><span style="color:green"><strong>Product has been added.</strong></span></p>

                }
                catch (Exception ex)
                {
                    <p class="text-center well"><span style="color:firebrick"><strong>@ex.Message</strong></span></p>
                }
            }
        }
    }
}
<!-- step 2 of validation is to setup the display control
    a) you can setup a single place general display for validation
    b) place validation display control beside the field in question
    -->
@Html.ValidationSummary()
<form id="theform" method="post">
    <div class="row">
        <div class="col-md-6 text-right">

            <label for="ProductName">Name:</label><br />
            <label for="SupplierID">Supplier:</label><br />
            <label for="CategoryID">Catgeory:</label><br />
            <label for="QuantityPerUnit">Qty/Unit:</label><br />
            <label for="UnitPrice">Price:</label><br />
            <label for="UnitsInStock">QoH:</label><br />
            <label for="UnitsOnOrder">QoO:</label><br />
            <label for="ReorderLevel">RoL:</label><br />
            <br />
        </div>
        <div class="col-me-6 text-left">

            <input type="text"
                   id="ProductName" name="ProductName"
                   value="@productname" />
            &nbsp; @Html.ValidationMessage("ProductName")<br />
            <select id="SupplierList" name="SupplierList">
                <option value="0">select supplier...</option>
                @foreach (var item in supplierlist)
                {
                    //if you want a prompt on the list then add an option

                    //supplierid is the local string variable
                    //item.SupplierID is the integer value in the collection
                    if (supplierid == item.SupplierID.ToString())
                    {
                        <option value="@item.SupplierID" selected>
                            @item.CompanyName
                        </option>
                    }
                    else
                    {
                        <option value="@item.SupplierID">
                            @item.CompanyName
                        </option>
                    }
                }
            </select>
            <br />
            <select id="CategoryList" name="CategoryList">
                <option value="0">select category...</option>
                @foreach (var item in categorylist)
                {
                    //if you want a prompt on the list then add an option

                    //supplierid is the local string variable
                    //item.SupplierID is the integer value in the collection
                    if (categoryid == item.CategoryID.ToString())
                    {
                        <option value="@item.CategoryID" selected>
                            @item.CategoryName
                        </option>
                    }
                    else
                    {
                        <option value="@item.CategoryID">
                            @item.CategoryName
                        </option>
                    }

                }
            </select>
            <br />
            <input type="text"
                   id="QuantityPerUnit" name="QuantityPerUnit"
                   value="@quantityperunit" /><br />
            <input type="number" step="0.01"
                   id="UnitPrice" name="UnitPrice"
                   value="@unitprice" /><br />
            <input type="number"
                   id="UnitsInStock" name="UnitsInStock"
                   value="@unitsinstock" /><br />
            <input type="number"
                   id="UnitsOnOrder" name="UnitsOnOrder"
                   value="@unitsonorder" /><br />
            <input type="number"
                   id="ReorderLevel" name="ReorderLevel"
                   value="@reorderlevel" /><br />
            <br />
        </div>
    </div>
    <div class="row">
        <div class="text-center">
            <input type="submit" id="FormButton" name="FormButton"
                   class="btn btn-primary" value="Add" />
            <input type="submit" id="FormButton" name="FormButton"
                   class="btn" value="Clear" />
        </div>
    </div>
</form>
